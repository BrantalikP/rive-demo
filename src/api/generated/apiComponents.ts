/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type AuthControllerLoginWithCredentialsError =
  Fetcher.ErrorWrapper<undefined>;

export type AuthControllerLoginWithCredentialsVariables = {
  body: Schemas.AuthInput;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerLoginWithCredentials = (
  variables: AuthControllerLoginWithCredentialsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserEntity,
    AuthControllerLoginWithCredentialsError,
    Schemas.AuthInput,
    {},
    {},
    {}
  >({ url: "/auth", method: "post", ...variables, signal });

export const useAuthControllerLoginWithCredentials = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserEntity,
      AuthControllerLoginWithCredentialsError,
      AuthControllerLoginWithCredentialsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UserEntity,
    AuthControllerLoginWithCredentialsError,
    AuthControllerLoginWithCredentialsVariables
  >({
    mutationFn: (variables: AuthControllerLoginWithCredentialsVariables) =>
      fetchAuthControllerLoginWithCredentials({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AuthControllerRequestMagicCodeError =
  Fetcher.ErrorWrapper<undefined>;

export type AuthControllerRequestMagicCodeVariables = {
  body: Schemas.MagicCodeInput;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerRequestMagicCode = (
  variables: AuthControllerRequestMagicCodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    AuthControllerRequestMagicCodeError,
    Schemas.MagicCodeInput,
    {},
    {},
    {}
  >({ url: "/auth/magic", method: "post", ...variables, signal });

export const useAuthControllerRequestMagicCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AuthControllerRequestMagicCodeError,
      AuthControllerRequestMagicCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    AuthControllerRequestMagicCodeError,
    AuthControllerRequestMagicCodeVariables
  >({
    mutationFn: (variables: AuthControllerRequestMagicCodeVariables) =>
      fetchAuthControllerRequestMagicCode({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MeControllerMeError = Fetcher.ErrorWrapper<undefined>;

export type MeControllerMeVariables = ApiContext["fetcherOptions"];

export const fetchMeControllerMe = (
  variables: MeControllerMeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.Me, MeControllerMeError, undefined, {}, {}, {}>({
    url: "/me",
    method: "get",
    ...variables,
    signal,
  });

export const useMeControllerMe = <TData = Schemas.Me,>(
  variables: MeControllerMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Me, MeControllerMeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Me, MeControllerMeError, TData>({
    queryKey: queryKeyFn({
      path: "/me",
      operationId: "meControllerMe",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMeControllerMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CrateControllerOpenedPathParams = {
  crateOrderId: number;
};

export type CrateControllerOpenedError = Fetcher.ErrorWrapper<undefined>;

export type CrateControllerOpenedVariables = {
  pathParams: CrateControllerOpenedPathParams;
} & ApiContext["fetcherOptions"];

export const fetchCrateControllerOpened = (
  variables: CrateControllerOpenedVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CrateActionEntity,
    CrateControllerOpenedError,
    undefined,
    {},
    {},
    CrateControllerOpenedPathParams
  >({
    url: "/crates/{crateOrderId}/opened",
    method: "post",
    ...variables,
    signal,
  });

export const useCrateControllerOpened = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CrateActionEntity,
      CrateControllerOpenedError,
      CrateControllerOpenedVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CrateActionEntity,
    CrateControllerOpenedError,
    CrateControllerOpenedVariables
  >({
    mutationFn: (variables: CrateControllerOpenedVariables) =>
      fetchCrateControllerOpened({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CrateControllerCompletedPathParams = {
  crateOrderId: number;
};

export type CrateControllerCompletedError = Fetcher.ErrorWrapper<undefined>;

export type CrateControllerCompletedVariables = {
  pathParams: CrateControllerCompletedPathParams;
} & ApiContext["fetcherOptions"];

export const fetchCrateControllerCompleted = (
  variables: CrateControllerCompletedVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CrateActionEntity,
    CrateControllerCompletedError,
    undefined,
    {},
    {},
    CrateControllerCompletedPathParams
  >({
    url: "/crates/{crateOrderId}/completed",
    method: "post",
    ...variables,
    signal,
  });

export const useCrateControllerCompleted = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CrateActionEntity,
      CrateControllerCompletedError,
      CrateControllerCompletedVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CrateActionEntity,
    CrateControllerCompletedError,
    CrateControllerCompletedVariables
  >({
    mutationFn: (variables: CrateControllerCompletedVariables) =>
      fetchCrateControllerCompleted({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CrateControllerSubmitReviewPathParams = {
  crateOrderId: number;
};

export type CrateControllerSubmitReviewError = Fetcher.ErrorWrapper<undefined>;

export type CrateControllerSubmitReviewVariables = {
  body: Schemas.CrateReviewInput;
  pathParams: CrateControllerSubmitReviewPathParams;
} & ApiContext["fetcherOptions"];

export const fetchCrateControllerSubmitReview = (
  variables: CrateControllerSubmitReviewVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CrateActionEntity,
    CrateControllerSubmitReviewError,
    Schemas.CrateReviewInput,
    {},
    {},
    CrateControllerSubmitReviewPathParams
  >({
    url: "/crates/{crateOrderId}/review",
    method: "post",
    ...variables,
    signal,
  });

export const useCrateControllerSubmitReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CrateActionEntity,
      CrateControllerSubmitReviewError,
      CrateControllerSubmitReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CrateActionEntity,
    CrateControllerSubmitReviewError,
    CrateControllerSubmitReviewVariables
  >({
    mutationFn: (variables: CrateControllerSubmitReviewVariables) =>
      fetchCrateControllerSubmitReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivityControllerListError = Fetcher.ErrorWrapper<undefined>;

export type ActivityControllerListResponse = Schemas.ActivityEntity[];

export type ActivityControllerListVariables = ApiContext["fetcherOptions"];

export const fetchActivityControllerList = (
  variables: ActivityControllerListVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    ActivityControllerListResponse,
    ActivityControllerListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/me/activities", method: "get", ...variables, signal });

export const useActivityControllerList = <
  TData = ActivityControllerListResponse,
>(
  variables: ActivityControllerListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityControllerListResponse,
      ActivityControllerListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ActivityControllerListResponse,
    ActivityControllerListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/me/activities",
      operationId: "activityControllerList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchActivityControllerList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type DiyControllerDiyPathParams = {
  uid: string;
};

export type DiyControllerDiyError = Fetcher.ErrorWrapper<undefined>;

export type DiyControllerDiyVariables = {
  pathParams: DiyControllerDiyPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDiyControllerDiy = (
  variables: DiyControllerDiyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Diy,
    DiyControllerDiyError,
    undefined,
    {},
    {},
    DiyControllerDiyPathParams
  >({ url: "/diys/{uid}", method: "get", ...variables, signal });

export const useDiyControllerDiy = <TData = Schemas.Diy,>(
  variables: DiyControllerDiyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Diy, DiyControllerDiyError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Diy, DiyControllerDiyError, TData>({
    queryKey: queryKeyFn({
      path: "/diys/{uid}",
      operationId: "diyControllerDiy",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchDiyControllerDiy({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/me";
      operationId: "meControllerMe";
      variables: MeControllerMeVariables;
    }
  | {
      path: "/me/activities";
      operationId: "activityControllerList";
      variables: ActivityControllerListVariables;
    }
  | {
      path: "/diys/{uid}";
      operationId: "diyControllerDiy";
      variables: DiyControllerDiyVariables;
    };
